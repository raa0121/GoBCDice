{

package parser

import (
	"github.com/raa0121/GoBCDice/pkg/core/ast"
	"github.com/raa0121/GoBCDice/pkg/core/token"
	"strconv"
	"strings"
)

// toIfaceSlice は、vを任意の型のスライスに変換する。
func toIfaceSlice(v interface{}) []interface{} {
	if v == nil {
		return nil
	}
	return v.([]interface{})
}

// leftAssociativeAdditive は、複数の加算/減算項からなる抽象構文木を作る。
func leftAssociativeAdditive(first interface{}, rest interface{}) (ast.Node, error) {
	lastNode := first.(ast.Node)
	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		op := string(rs[0].([]byte))
		right := rs[1].(ast.Node)

		switch op {
		case "+":
			lastNode = ast.NewAdd(lastNode, right)
		case "-":
			lastNode = ast.NewSubtract(lastNode, right)
		}
	}

	return lastNode, nil
}

// leftAssociativeMultiplicative は、複数の乗算/除算項からなる抽象構文木を作る。
func leftAssociativeMultiplicative(first interface{}, rest interface{}) (ast.Node, error) {
	lastNode := first.(ast.Node)
	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		op := string(rs[0].([]byte))
		right := rs[1].(ast.Node)

		roundingMethod := ""
		if len(rs) >= 3 {
			roundingMethod = strings.ToUpper(string(rs[2].([]byte)))
		}

		switch op {
		case "*":
			lastNode = ast.NewMultiply(lastNode, right)
		case "/":
			switch roundingMethod {
			case "U":
				lastNode = ast.NewDivideWithRoundingUp(lastNode, right)
			case "R":
				lastNode = ast.NewDivideWithRounding(lastNode, right)
			case "D", "":
				lastNode = ast.NewDivideWithRoundingDown(lastNode, right)
			}
		}
	}

	return lastNode, nil
}

}

Command <- ResetRandCount n:(Choice / Calc / CommandWithExpression) {
	return n, nil
}

CommandWithExpression <- n:(BRollComp / BRollList / RRollComp / RRollList / URollComp / URollExpr / DRollCompCommand / DRollExprCommand) EOT {
	return n, nil
}

Choice <- "CHOICE["i items:ChoiceItems (',' [\pZ]*)? ']' {
	return items, nil
}

ChoiceItems <- first:ChoiceItem rest:(',' ChoiceItem)* {
	firstString := first.(*ast.String)
	choice := ast.NewChoice(firstString)

	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		i := rs[1].(*ast.String)

		choice.Append(i)
	}

	return choice, nil
}

ChoiceItem <- [\pZ]* s:ChoiceItemChars {
	return s, nil
}

ChoiceItemChars <- [^\],]+ {
	return ast.NewString(strings.TrimSpace(string(c.text))), nil
}

Calc <- 'C'i '(' expr:IntExpr ')' {
	return ast.NewCalc(expr.(ast.Node)), nil
}

DRollExprCommand <- expr:DRollExpr {
	if c.state["RandCount"].(int) < 1 {
		return nil, fmt.Errorf("random element not found")
	}

	return ast.NewDRollExpr(expr.(ast.Node)), nil
}

DRollCompCommand <- expr:DRollComp {
	if c.state["RandCount"].(int) < 1 {
		return nil, fmt.Errorf("random element not found")
	}

	return ast.NewDRollComp(expr.(ast.Node)), nil
}

BRollList <- first:BRoll rest:('+' BRoll)* {
	bRollList := ast.NewBRollList(first.(*ast.VariableInfixExpression))

	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		b := rs[1].(*ast.VariableInfixExpression)
		bRollList.Append(b)
	}

	return bRollList, nil
}

BRollComp <- left:BRollList op:CompareOp right:IntExpr {
	return ast.NewBRollComp(
		ast.NewCompare(
			left.(ast.Node),
			string(op.([]byte)),
			right.(ast.Node),
		),
	), nil
}

RRollList <- first:RRoll rest:('+' RRoll)* th:('[' IntExpr ']')? {
	ths := toIfaceSlice(th)

	var threshold ast.Node = ast.NilInstance()
	if ths != nil {
		threshold = ths[1].(ast.Node)
	}

	rRollList := ast.NewRRollList(first.(*ast.VariableInfixExpression), threshold)

	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		rr := rs[1].(*ast.VariableInfixExpression)
		rRollList.Append(rr)
	}

	return rRollList, nil
}

RRollComp <- left:RRollList op:CompareOp right:IntExpr {
	return ast.NewRRollComp(
		ast.NewCompare(
			left.(ast.Node),
			string(op.([]byte)),
			right.(ast.Node),
		),
	), nil
}

URollComp <- left:URollExpr op:CompareOp right:IntExpr {
	return ast.NewURollComp(
		ast.NewCompare(
			left.(ast.Node),
			string(op.([]byte)),
			right.(ast.Node),
		),
	), nil
}

URollExpr <- uRollList:URollList bonus:(('+' / '-') IntExprAdditive)? {
	bonusSlice := toIfaceSlice(bonus)

	var bonusNode ast.InfixExpression = nil
	if bonusSlice != nil {
		op := string(bonusSlice[0].([]byte))
		right := bonusSlice[1].(ast.Node)

		switch op {
		case "+":
			bonusNode = ast.NewAdd(ast.NewInt(0), right)
		case "-":
			bonusNode = ast.NewSubtract(ast.NewInt(0), right)
		default:
			return nil, fmt.Errorf("unknown operator: %s", op)
		}
	}

	return ast.NewURollExpr(uRollList.(*ast.RRollList), bonusNode), nil
}

URollList <- first:URoll rest:('+' URoll)* th:('[' IntExpr ']')? {
	ths := toIfaceSlice(th)

	var threshold ast.Node = ast.NilInstance()
	if ths != nil {
		threshold = ths[1].(ast.Node)
	}

	uRollList := ast.NewRRollList(first.(*ast.VariableInfixExpression), threshold)

	for _, r := range toIfaceSlice(rest) {
		rs := toIfaceSlice(r)
		rr := rs[1].(*ast.VariableInfixExpression)
		uRollList.Append(rr)
	}

	return uRollList, nil
}

IntExpr <- IntExprAdditive

IntExprAdditive <- first:IntExprMultiplicative rest:(('+' / '-') IntExprMultiplicative)* {
	return leftAssociativeAdditive(first, rest)
}

IntExprMultiplicative <- first:IntExprPrimary rest:('/' IntExprPrimary [urd]i / (('*' / '/') IntExprPrimary))* {
	return leftAssociativeMultiplicative(first, rest)
}

IntExprPrimary <- Integer / IntExprUnaryPlus / IntExprUnaryMinus / ParenthesizedIntExpr

ParenthesizedIntExpr <- '(' e:IntExpr ')' {
	return e.(ast.Node), nil
}

IntExprUnaryPlus <- '+' e:IntExprPrimary {
	return e.(ast.Node), nil
}

IntExprUnaryMinus <- '-' e:IntExprPrimary {
	return ast.NewUnaryMinus(e.(ast.Node)), nil
}

DRollComp <- left:DRollExprAdditive op:CompareOp right:IntExpr {
	return ast.NewCompare(
		left.(ast.Node),
		string(op.([]byte)),
		right.(ast.Node),
	), nil
}

DRollExpr <- DRollExprAdditive

DRollExprAdditive <- first:DRollExprMultiplicative rest:(('+' / '-') DRollExprMultiplicative)* {
	return leftAssociativeAdditive(first, rest)
}

DRollExprMultiplicative <- first:DRollExprPrimary rest:('/' DRollExprPrimary [urd]i / (('*' / '/') DRollExprPrimary))* {
	return leftAssociativeMultiplicative(first, rest)
}

DRollExprPrimary <- DRoll / RandomNumber / Integer / DRollExprUnaryPlus / DRollExprUnaryMinus / ParenthesizedDRollExpr

ParenthesizedDRollExpr <- '(' e:DRollExpr ')' {
	return e.(ast.Node), nil
}

DRollExprUnaryPlus <- '+' e:DRollExprPrimary {
	return e.(ast.Node), nil
}

DRollExprUnaryMinus <- '-' e:DRollExprPrimary {
	return ast.NewUnaryMinus(e.(ast.Node)), nil
}

IntRandExpr <- IntRandExprAdditive

IntRandExprAdditive <- first:IntRandExprMultiplicative rest:(('+' / '-') IntRandExprMultiplicative)* {
	return leftAssociativeAdditive(first, rest)
}

IntRandExprMultiplicative <- first:IntRandExprPrimary rest:('/' IntRandExprPrimary [urd]i / (('*' / '/') IntRandExprPrimary))* {
	return leftAssociativeMultiplicative(first, rest)
}

IntRandExprPrimary <- Integer / RandomNumber / IntRandExprUnaryPlus / IntRandExprUnaryMinus / ParenthesizedIntRandExpr

ParenthesizedIntRandExpr <- '(' e:IntRandExpr ')' {
	return e.(ast.Node), nil
}

IntRandExprUnaryPlus <- '+' e:IntRandExprPrimary {
	return e.(ast.Node), nil
}

IntRandExprUnaryMinus <- '-' e:IntRandExprPrimary {
	return ast.NewUnaryMinus(e.(ast.Node)), nil
}

DRoll <- num:RollOperand 'D'i sides:RollOperand IncRandCount {
	numNode := num.(ast.Node)
	sidesNode := sides.(ast.Node)

	return ast.NewDRoll(numNode, sidesNode), nil
}

BRoll <- num:RollOperand 'B'i sides:RollOperand IncRandCount {
	numNode := num.(ast.Node)
	sidesNode := sides.(ast.Node)

	return ast.NewBRoll(numNode, sidesNode), nil
}

RRoll <- num:RollOperand 'R'i sides:RollOperand IncRandCount {
	numNode := num.(ast.Node)
	sidesNode := sides.(ast.Node)

	return ast.NewRRoll(numNode, sidesNode), nil
}

URoll <- num:RollOperand 'U'i sides:RollOperand IncRandCount {
	numNode := num.(ast.Node)
	sidesNode := sides.(ast.Node)

	return ast.NewURoll(numNode, sidesNode), nil
}

RollOperand <- Integer / RandomNumber / ParenthesizedIntRandExpr

RandomNumber <- '[' min:RandomNumberOperand "..." max:RandomNumberOperand ']' IncRandCount {
	minNode := min.(ast.Node)
	maxNode := max.(ast.Node)

	return ast.NewRandomNumber(minNode, maxNode), nil
}

RandomNumberOperand <- Integer / ParenthesizedIntExpr

ResetRandCount <- #{
	c.state["RandCount"] = 0
	return nil
}

IncRandCount <- #{
	c.state["RandCount"] = c.state["RandCount"].(int) + 1
	return nil
}

Integer <- [0-9]+ {
	s := string(c.text)

	// TODO: 整数が大きすぎるときなどのエラー処理が必要
	value, _ := strconv.Atoi(s)

	return ast.NewInt(value), nil
}

CompareOp <- "=" / "<>" / "<=" / "<" / ">=" / ">"

EOT <- !.
